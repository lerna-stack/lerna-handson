# akka-persistence で cassandra を使う設定を有効にする
akka.persistence {
  journal.plugin = "akka.persistence.cassandra.journal"
  snapshot-store.plugin = "akka.persistence.cassandra.snapshot"
}

datastax-java-driver {
  # https://docs.datastax.com/en/developer/java-driver/4.5/manual/core/configuration/
  # 接続情報
  # (本番では環境変数から設定するようにすること)
  basic.contact-points = [
    "127.0.0.1:9042"
  ]
  basic.load-balancing-policy.local-datacenter = "datacenter1"

  # PCスペック次第でタイムアウトになることがあったため
  # デフォルトは2秒だが、バッファを持って30秒くらいいしておく
  basic.request.timeout = 30 seconds


  # 認証情報
  # https://docs.datastax.com/en/developer/java-driver/4.5/manual/core/authentication/
  # 環境に応じて変えること
  advanced.auth-provider {
    class = PlainTextAuthProvider
    username = "cassandra"
    password = "cassandra"
  }

  # 初期化時の再接続処理を有効にする
  # ドキュメントで有効にすることが推奨されている。
  advanced.reconnect-on-init = true
}

# 必要な設定を上書きしていく。
# デフォルト値はバージョンごとに違う可能性があるため確認すること
# base file
# https://doc.akka.io/docs/akka-persistence-cassandra/1.0.1/configuration.html
akka.persistence.cassandra.events-by-tag {
  # events-by-tag を有効にする
  # 各種パラメータは要件に合わせてチューニングすること
  # サンプルではデフォルト値を使っている
  enabled = true
}

# 必要な設定を上書きしていく。
# デフォルト値はバージョンごとに違う可能性があるため確認すること
# base file
# https://doc.akka.io/docs/akka-persistence-cassandra/1.0.1/configuration.html
akka.persistence.cassandra.journal {
  # キースペースとテーブルを自動で作成する
  # 本番環境は手動で作成すること
  keyspace-autocreate = true
  tables-autocreate = true
}

# 必要な設定を上書きしていく。
# デフォルト値はバージョンごとに違う可能性があるため確認すること
# base file
# https://doc.akka.io/docs/akka-persistence-cassandra/1.0.1/configuration.html
akka.persistence.cassandra.snapshot {
  # キースペースとテーブルを自動で作成する
  # 本番環境は手動で作成すること
  keyspace-autocreate = true
  tables-autocreate = true
}
